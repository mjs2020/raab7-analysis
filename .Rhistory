ungroup()
nodes <- sankey_plot_data %>%
select(In, Out) %>%
pivot_longer(c("In", "Out"), names_to = "col_name",
values_to =  "name_match") %>%
select(-1) %>% distinct() %>%
mutate(name = str_sub(name_match, end =-3))
nodes <- data.frame(nodes)
nodes <- nodes %>%
mutate(name = recode(name,
"VI,encounter_reason_non_refractive" = "VI + NVIC"))
nodes <- nodes %>%
mutate(name = recode(name,
"encounter_reason_non_refractive" = "NVIC"))
nodes <- nodes %>%
mutate(name = recode(name,
"encounter_reason_refractive" = "VI"))
nodes <- nodes %>%
mutate(name = recode(name,
"encounter_reason_refractive,encounter_reason_non_refractive" = "VI + NVIC"))
nodes <- nodes %>%
mutate(name = recode(name,
"encounter_reason_acuity,encounter_reason_non_refractive" = "VI + NVIC"))
nodes <- nodes %>%
mutate(name = recode(name,
"encounter_reason_acuity,encounter_reason_refractive" = "VI"))
nodes <- nodes %>%
mutate(name = recode(name,
"encounter_reason_acuity,encounter_reason_refractive,encounter_reason_non_refractive" = "VI + NVIC"))
nodes <- nodes %>%
mutate(name = recode(name,
"No_subj_ref_req" = "Subjective Refraction Not Required"))
nodes <- nodes %>%
mutate(name = recode(name,
"encounter_reason_acuity,encounter_reason_non_refractive,encounter_reason_referral" = "VI + NVIC"))
nodes <- nodes %>%
mutate(name = recode(name,
"encounter_reason_acuity,encounter_reason_referral" = "VI"))
nodes <- nodes %>%
mutate(name = recode(name,
"encounter_reason_non_refractive,encounter_reason_referral" = "NVIC"))
nodes <- nodes %>%
mutate(name = recode(name,
"prescription_status_not_prescribed" = "Spectacles Not Prescribed"))
nodes <- nodes %>%
mutate(name = recode(name,
"prescription_status_prescribed" = "Spectacles Prescribed"))
nodes <- nodes %>%
mutate(name = recode(name,
"eye_condition_blepharitis" = "Ocular Exam - Blepharitis"))
nodes <- nodes %>%
mutate(name = recode(name,
"eye_condition_normal" = "Ocular Exam - Healthy"))
nodes <- nodes %>%
mutate(name = recode(name,
"refraction_needed_false" = "Refraction - No"))
nodes <- nodes %>%
mutate(name = recode(name,
"refraction_needed_true" = "Refraction - Yes"))
nodes <- nodes %>%
mutate(name = recode(name,
"eye_condition_ocular_allergy" = "Ocular Exam - Ocular Allergy"))
nodes <- nodes %>%
mutate(name = recode(name,
"eye_condition_other_diagnosis" = "Ocular Exam - Other Diagnosis"))
nodes <- nodes %>%
mutate(name = recode(name,
"None" = "Referral - None"))
nodes <- nodes %>%
mutate(name = recode(name,
"Other" = "Referral - Other"))
nodes <- nodes %>%
mutate(name = recode(name,
"Primary eye care" = "Referral - Primary Eye Care"))
nodes <- nodes %>%
mutate(name = recode(name,
"Cycloplegic refraction" = "Referral - Cycloplegic Refraction"))
nodes <- nodes %>%
mutate(name = recode(name,
"Ophthalmology review" = "Referral - Ophthalmology"))
```
links2 <- sankey_plot_data
links2 <- links2 %>%
rename(source = `In`,
target = `Out`,
value = `count`
)
nodes #nodes DF akready generated
links2 <- links2 %>%
mutate(IDsource = match(source, nodes$name_match)-1,
IDtarget = match(target, nodes$name_match)-1)
links2 <- data.frame(links2)
# Make the Network
plt <- sankeyNetwork(Links = links2, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
nodeWidth = 15,
nodePadding = 10,
fontFamily = "Arial",
height = 470,
width = 1200,
sinksRight=FALSE,
)
plt
javascript_string <-
'function(el, x){
d3.select(el).selectAll(".node text")
.text(d => d.name + " (" + d.value + ")");
}'
htmlwidgets::onRender(x = plt, jsCode = javascript_string)
saveNetwork(plt, "sankeyplot.html", selfcontained = TRUE)
getwd()
install.packages("rmarkdown")
#3. Load packages needed for wrapper script - others will be loaded in reporter script
require(rmarkdown)
require(readxl)
require(here)
detach("package:here", unload = TRUE)
setwd("GBR/RAAB/ians_code/raab7-analysis-main/")
#2. Clear environment and set working directory to raab7-analysis folder
rm(list = ls())
setwd("GBR/RAAB/ians_code/raab7-analysis-main/")
#3. Load packages needed for wrapper script - others will be loaded in reporter script
require(rmarkdown)
require(readxl)
require(here)
#4. Read in meta file and trim unused rows
meta<-read_xlsx(here('data', "raab-log_v5.xlsx"))
#4. Read in meta file and trim unused rows
meta<-read_xlsx(here('data', "raab-log_v5.xlsx"))
#4. Read in meta file and trim unused rows
meta<-read_xlsx(here('data', "raab-log_v5.xlsx"))
meta[meta=="NA"]<-NA
meta<-meta[!is.na(meta$raab_id),]
#5. Set data file names and retrieve RAAB ID
raab_id_hr<-"2022_Ethiopia_Amhara_West-Gojam"
resident.data<-"ethiopia.csv"
raab<-read.csv(here("data", resident.data))
pop.data<-"ethiopia_pop.csv"
raab_id<-raab$regionId[1]
#6. Make folders for output (will override any previous outputs in the same folder)
ID<-raab_id
if (file.exists(here("outputs",ID))) {outdir<-ID} else {dir.create(here("outputs",ID)); outdir<-ID}
dir.create(here("outputs",ID,"/summary"))
dir.create(here("outputs",ID,"/summary/data"))
dir.create(here("outputs",ID,"/raw"))
dir.create(here("outputs",ID,"/raw/data"))
#7. Run reporter script
render(here("RAAB7_scripts","RAAB7_reporter_new-script-names.Rmd"), output_file = here("outputs", paste0(ID,"_","report")), output_dir = here("outputs", ID, "summary"))
#8. Delete intermediate files
unlink(here("outputs", "summary", "*_files"),recursive=T)
surgery.bars,cat
surgery.bars.cat
View(surgery.bars.cat)
surgery.bars1.total<-data.frame(table(raab$bilateral_operable_cataract,raab$surgery_none_reason))
surgery.bars1.cat.total<-surgery.bars1.total[surgery.bars1.total$Var1==1,c("Var2","Freq")]
View(surgery.bars1.total)
raab$surgery_none_reason
render(here("RAAB7_scripts","HTML_tester.Rmd"), output_file = here("outputs", paste0(ID,"_","report")), output_dir = here("outputs", ID, "summary"))
install.packages("htmltools")
require(htmltools)
render(here("RAAB7_scripts","HTML_tester.Rmd"), output_file = here("outputs", paste0(ID,"_","report")), output_dir = here("outputs", ID, "summary"))
require(rmarkdown)
require(readxl)
require(here)
render(here("RAAB7_scripts","HTML_tester.Rmd"), output_file = here("outputs", paste0(ID,"_","report")), output_dir = here("outputs", ID, "summary"))
install.packages("rmdformats")
here("data","logo.png")
library(magick)
install.packages("magick")
require(magick)
image_read(here("data","logo.png"))
render(here("RAAB7_scripts","HTML_tester.Rmd"), output_file = here("outputs", paste0(ID,"_","report")), output_dir = here("outputs", ID, "summary"))
require(rmdformats)
render(here("RAAB7_scripts","HTML_tester.Rmd"), output_file = here("outputs", paste0(ID,"_","report")), output_dir = here("outputs", ID, "summary"))
getwd()
#2. Navigate to downloaded folder
setwd("C:/Users/icrurbut/Dropbox/Bert/GBR/RAAB/ians_code/raab7-analysis-main")
raab
raab$raab_id[1]
table(raab$surgery_none_reason)
raab$surgery_none_reason_bum<-gsub("\\","",raab$surgery_none_reason)
table(raab$surgery_none_reason_bum)
raab$surgery_none_reason_bum<-gsub("\\\\","",raab$surgery_none_reason)
table(raab$surgery_none_reason_bum)
grep("surgery_none_reason_unaware",raab$surgery_none_reason)
table(grep("surgery_none_reason_unaware",raab$surgery_none_reason))
sum(grep("surgery_none_reason_unaware",raab$surgery_none_reason))
sum(table(grep("surgery_none_reason_unaware",raab$surgery_none_reason))[1])
sum(table(grep("surgery_none_reason_unaware",raab$surgery_none_reason)))
sum(table(grep("surgery_none_reason_unnecessary",raab$surgery_none_reason)))
raab$surgery_none_reason_temp<-gsub("\\\\","",raab$surgery_none_reason)
raab$surgery_none_reason_temp<-gsub("[","",raab$surgery_none_reason_temp)
raab$surgery_none_reason_temp<-gsub("\\[","",raab$surgery_none_reason_temp)
raab$surgery_none_reason_temp<-gsub("\\]","",raab$surgery_none_reason_temp)
raab$surgery_none_reason_temp<-str_split(raab$surgery_none_reason_temp,",")
table(raab$surgery_none_reason_temp)
View(raab)
raab$surgery_none_reason_temp[1]
raab$surgery_none_reason_temp[2]
raab$surgery_none_reason_temp[5]
bum<-raab[,c("raab_id","surgery_none_reason_temp")]
View(bum)
table(raab$surgery_none_reason_temp)
cat(raab$surgery_none_reason_temp)
unqiue(raab$surgery_none_reason_temp)
unique(raab$surgery_none_reason_temp)
bars<-c(
"surgery_none_reason_unaware",
"surgery_none_reason_other",
"surgery_none_reason_denied",
"surgery_none_reason_access",
"surgery_none_reason_cost",
"surgery_none_reason_unnecessary",
"surgery_none_reason_fear")
surgery.bars<-as.data.frame(c(
"surgery_none_reason_unaware",
"surgery_none_reason_other",
"surgery_none_reason_denied",
"surgery_none_reason_access",
"surgery_none_reason_cost",
"surgery_none_reason_unnecessary",
"surgery_none_reason_fear"))
View(surgery.bars)
surgery.bars<-as.data.frame(Barrier=c(
"surgery_none_reason_unaware",
"surgery_none_reason_other",
"surgery_none_reason_denied",
"surgery_none_reason_access",
"surgery_none_reason_cost",
"surgery_none_reason_unnecessary",
"surgery_none_reason_fear"))
names(surgery.bars)<-"Barrier"
View(surgery.bars)
{surgery.bars$total_count<-sum(table(grep(surgery.bars$Barrier[i],raab$surgery_none_reason)))
}
View(surgery.bars)
for (i in 1:nrow(surgery.bars)){surgery.bars$total_count[i]<-sum(table(grep(surgery.bars$Barrier[i],raab$surgery_none_reason)))}
View(surgery.bars)
table(raab$gender)
names(surgery.bars)<-"Barrier"
for (i in 1:nrow(surgery.bars))
{
surgery.bars$total_count[i]<-sum(table(grep(surgery.bars$Barrier[i],raab$surgery_none_reason)))
surgery.bars$male_count[i]<-sum(table(grep(surgery.bars$Barrier[i],raab$surgery_none_reason[raab$gender=="male"])))
surgery.bars$female_count[i]<-sum(table(grep(surgery.bars$Barrier[i],raab$surgery_none_reason[raab$gender=="female"])))
}
View(surgery.bars)
surgery.bars<-as.data.frame(c(
"surgery_none_reason_unaware",
"surgery_none_reason_other",
"surgery_none_reason_denied",
"surgery_none_reason_access",
"surgery_none_reason_cost",
"surgery_none_reason_unnecessary",
"surgery_none_reason_fear"))
names(surgery.bars)<-"Barrier"
for (i in 1:nrow(surgery.bars))
{
surgery.bars$total_count[i]<-sum(table(grep(surgery.bars$Barrier[i],raab$surgery_none_reason)))
surgery.bars$male_count[i]<-sum(table(grep(surgery.bars$Barrier[i],raab$surgery_none_reason[raab$gender=="male"])))
surgery.bars$female_count[i]<-sum(table(grep(surgery.bars$Barrier[i],raab$surgery_none_reason[raab$gender=="female"])))
}
View(surgery.bars)
surgery.bars$null_count[i]<-sum(table(grep("chump",raab$surgery_none_reason[raab$gender=="female"])))
bum<-sum(table(grep("chump",raab$surgery_none_reason[raab$gender=="female"])))
bum
View(surgery.bars)
surgery.bars[nrow(surgery.bars),2:4]<-colSums(surgery.bars[,2:4])
View(surgery.bars)
surgery.bars[nrow(surgery.bars)+1,2:4]<-colSums(surgery.bars[,2:4])
surgery.bars[nrow(surgery.bars),1]<-"Total"
View(surgery.bars)
surgery.bars<-as.data.frame(c(
"surgery_none_reason_unaware",
"surgery_none_reason_other",
"surgery_none_reason_denied",
"surgery_none_reason_access",
"surgery_none_reason_cost",
"surgery_none_reason_unnecessary",
"surgery_none_reason_fear"))
names(surgery.bars)<-"Barrier"
for (i in 1:nrow(surgery.bars))
{
surgery.bars$total_count[i]<-sum(table(grep(surgery.bars$Barrier[i],raab$surgery_none_reason)))
surgery.bars$male_count[i]<-sum(table(grep(surgery.bars$Barrier[i],raab$surgery_none_reason[raab$gender=="male"])))
surgery.bars$female_count[i]<-sum(table(grep(surgery.bars$Barrier[i],raab$surgery_none_reason[raab$gender=="female"])))
}
surgery.bars[nrow(surgery.bars)+1,2:4]<-colSums(surgery.bars[,2:4])
surgery.bars[nrow(surgery.bars),1]<-"Total"
View(surgery.bars)
surgery.bars$total_percent<-round((surgery.bars$total_count/sum(surgery.bars$total_count,na.rm=T)*100),1)
surgery.bars$male_percent<-round((surgery.bars$male_count/sum(surgery.bars$male_count,na.rm=T)*100),1)
surgery.bars$female_percent<-round((surgery.bars$female_count/sum(surgery.bars$female_count,na.rm=T)*100),1)
View(surgery.bars)
surgery.bars[nrow(surgery.bars)+1,]<-NA
sbcnts<-grep("count",names(surgery.bars))
sbpcts<-grep("percent",names(surgery.bars))
surgery.bars[nrow(surgery.bars),sbcnts]<-colSums(surgery.bars[,sbcnts],na.rm=T)
surgery.bars[nrow(surgery.bars),sbpcts]<-100.0
View(surgery.bars)
surgery.bars<-as.data.frame(c(
"surgery_none_reason_unaware",
"surgery_none_reason_other",
"surgery_none_reason_denied",
"surgery_none_reason_access",
"surgery_none_reason_cost",
"surgery_none_reason_unnecessary",
"surgery_none_reason_fear"))
names(surgery.bars)<-"Barrier"
for (i in 1:nrow(surgery.bars))
{
surgery.bars$total_count[i]<-sum(table(grep(surgery.bars$Barrier[i],raab$surgery_none_reason)))
surgery.bars$male_count[i]<-sum(table(grep(surgery.bars$Barrier[i],raab$surgery_none_reason[raab$gender=="male"])))
surgery.bars$female_count[i]<-sum(table(grep(surgery.bars$Barrier[i],raab$surgery_none_reason[raab$gender=="female"])))
}
surgery.bars$total_percent<-round((surgery.bars$total_count/sum(surgery.bars$total_count,na.rm=T)*100),1)
surgery.bars$male_percent<-round((surgery.bars$male_count/sum(surgery.bars$male_count,na.rm=T)*100),1)
surgery.bars$female_percent<-round((surgery.bars$female_count/sum(surgery.bars$female_count,na.rm=T)*100),1)
surgery.bars[nrow(surgery.bars)+1,]<-NA
surgery.bars[nrow(surgery.bars),1]<-"Total"
sbcnts<-grep("count",names(surgery.bars))
sbpcts<-grep("percent",names(surgery.bars))
surgery.bars[nrow(surgery.bars),sbcnts]<-colSums(surgery.bars[,sbcnts],na.rm=T)
surgery.bars[nrow(surgery.bars),sbpcts]<-100.0
View(surgery.bars)
sum11.nice.names<-surgery.bars[, c("Barrier","total_count","total_percent","female_count","female_percent","male_count","male_percent")]
View(sum11.nice.names)
surgery.bars$Barrier<-recode_factor(surgery.bars$Barrier,surgery_none_reason_access = "Access", surgery_none_reason_cost = "Cost", surgery_none_reason_denied = "Denied", surgery_none_reason_fear = "Fear", surgery_none_reason_other = "Other", surgery_none_reason_unaware = "Unaware", surgery_none_reason_unnecessary = "Felt not needed", Total = "Total")
View(surgery.bars)
#2. Navigate to downloaded folder (replace path with)
setwd("X:/path/to/folder")
getwd()
#3. Load packages needed for wrapper script - others will be loaded in reporter script
require(rmarkdown)
require(readxl)
require(here)
#4. Read in meta file and trim unused rows
meta<-read_xlsx(here('data', "raab-log_v5.xlsx"))
meta[meta=="NA"]<-NA
meta<-meta[!is.na(meta$raab_id),]
#5. Set data file names and retrieve RAAB ID
raab_id_hr<-"2022_Ethiopia_Amhara_West-Gojam"
resident.data<-"ethiopia.csv"
raab<-read.csv(here("data", resident.data))
pop.data<-"ethiopia_pop.csv"
raab_id<-raab$regionId[1]
#6. Make folders for output (will override any previous outputs in the same folder)
ID<-raab_id
if (file.exists(here("outputs",ID))) {outdir<-ID} else {dir.create(here("outputs",ID)); outdir<-ID}
dir.create(here("outputs",ID,"/summary"))
dir.create(here("outputs",ID,"/summary/data"))
if (file.exists(here("outputs",ID))) {unlink(here("outputs",ID),recursive=T); dir.create(here("outputs",ID); outdir<-ID} else {dir.create(here("outputs",ID)); outdir<-ID}
#6. Make folders for output (will override any previous outputs in the same folder)
ID<-raab_id
if (file.exists(here("outputs",ID)))
{
dir.create(here("outputs",ID)
outdir<-ID
if (file.exists(here("outputs",ID)))
{
unlink(here("outputs",ID),recursive = T)
dir.create(here("outputs",ID))
outdir<-ID
}
else
{
dir.create(here("outputs",ID))
outdir<-ID
}
if (file.exists(here("outputs",ID)))
{
unlink(here("outputs",ID),recursive = T)
dir.create(here("outputs",ID))
outdir<-ID
}
else
unlink(here("outputs",ID),recursive = T)
dir.create(here("outputs",ID))
outdir<-ID
dir.create(here("outputs",ID,"/summary"))
dir.create(here("outputs",ID,"/summary/data"))
dir.create(here("outputs",ID,"/raw"))
dir.create(here("outputs",ID,"/raw/data"))
#2. Navigate to downloaded folder (replace path with)
rm(list = ls())
setwd("X:/path/to/folder")
#3. Load packages needed for wrapper script - others will be loaded in reporter script
require(rmarkdown)
require(readxl)
require(here)
#4. Read in meta file and trim unused rows
meta<-read_xlsx(here('data', "raab-log_v5.xlsx"))
meta[meta=="NA"]<-NA
meta<-meta[!is.na(meta$raab_id),]
#5. Set data file names and retrieve RAAB ID
raab_id_hr<-"2022_Ethiopia_Amhara_West-Gojam"
resident.data<-"ethiopia.csv"
raab<-read.csv(here("data", resident.data))
pop.data<-"ethiopia_pop.csv"
raab_id<-raab$regionId[1]
#6. Make folders for output (will override any previous outputs in the same folder)
ID<-raab_id
unlink(here("outputs",ID),recursive = T)
dir.create(here("outputs",ID))
outdir<-ID
dir.create(here("outputs",ID,"/summary"))
dir.create(here("outputs",ID,"/summary/data"))
dir.create(here("outputs",ID,"/raw"))
dir.create(here("outputs",ID,"/raw/data"))
#7. Run reporter script
render(here("RAAB7_scripts","RAAB7_reporter_new-script-names.Rmd"), output_file = here("outputs", paste0(ID,"_","report")), output_dir = here("outputs", ID, "summary"))
#7. Run reporter script
render(here("RAAB7_scripts","RAAB7_reporter_new-script-names.Rmd"), output_file = here("outputs", paste0(ID,"_","report")), output_dir = here("outputs", ID, "summary"))
unlink(here("outputs",ID),recursive = T)
dir.create(here("outputs",ID))
outdir<-ID
dir.create(here("outputs",ID,"/summary"))
dir.create(here("outputs",ID,"/summary/data"))
dir.create(here("outputs",ID,"/raw"))
dir.create(here("outputs",ID,"/raw/data"))
#7. Run reporter script
render(here("RAAB7_scripts","RAAB7_reporter_new-script-names.Rmd"), output_file = here("outputs", paste0(ID,"_","report")), output_dir = here("outputs", ID, "summary"))
surgery.bars
View(surgery.bars)
install.packages("fancyhdr")
unlink(here("outputs",ID),recursive = T)
dir.create(here("outputs",ID))
outdir<-ID
dir.create(here("outputs",ID,"/summary"))
dir.create(here("outputs",ID,"/summary/data"))
dir.create(here("outputs",ID,"/raw"))
dir.create(here("outputs",ID,"/raw/data"))
#7. Run reporter script
render(here("RAAB7_scripts","RAAB7_reporter_new-script-names.Rmd"), output_file = here("outputs", paste0(ID,"_","report")), output_dir = here("outputs", ID, "summary"))
getwd()
setwd("C:/Users/icrurbut/Dropbox/Bert/GBR/RAAB/github_repo_sync/")
#2. Navigate to downloaded folder (replace path with)
rm(list = ls())
#3. Load packages needed for wrapper script - others will be loaded in reporter script
require(rmarkdown)
require(readxl)
require(here)
#4. Read in meta file and trim unused rows
meta<-read_xlsx(here('data', "raab-log_v5.xlsx"))
meta[meta=="NA"]<-NA
meta<-meta[!is.na(meta$raab_id),]
#5. Set data file names and retrieve RAAB ID
raab_id_hr<-"2022_Ethiopia_Amhara_West-Gojam"
resident.data<-"ethiopia.csv"
raab<-read.csv(here("data", resident.data))
pop.data<-"ethiopia_pop.csv"
raab_id<-raab$regionId[1]
#6. Make folders for output (will override any previous outputs in the same folder)
ID<-raab_id
unlink(here("outputs",ID),recursive = T)
dir.create(here("outputs",ID))
outdir<-ID
dir.create(here("outputs",ID,"/summary"))
dir.create(here("outputs",ID,"/summary/data"))
dir.create(here("outputs",ID,"/raw"))
dir.create(here("outputs",ID,"/raw/data"))
#7. Run reporter script
render(here("RAAB7_scripts","RAAB7_reporter_new-script-names.Rmd"), output_file = here("outputs", paste0(ID,"_","report")), output_dir = here("outputs", ID, "summary"))
here()
detach("package:here", unload = TRUE)
require(here)
#4. Read in meta file and trim unused rows
meta<-read_xlsx(here('data', "raab-log_v5.xlsx"))
meta[meta=="NA"]<-NA
meta<-meta[!is.na(meta$raab_id),]
#5. Set data file names and retrieve RAAB ID
raab_id_hr<-"2022_Ethiopia_Amhara_West-Gojam"
resident.data<-"ethiopia.csv"
raab<-read.csv(here("data", resident.data))
pop.data<-"ethiopia_pop.csv"
raab_id<-raab$regionId[1]
#6. Make folders for output (will override any previous outputs in the same folder)
ID<-raab_id
unlink(here("outputs",ID),recursive = T)
dir.create(here("outputs",ID))
outdir<-ID
dir.create(here("outputs",ID,"/summary"))
dir.create(here("outputs",ID,"/summary/data"))
dir.create(here("outputs",ID,"/raw"))
dir.create(here("outputs",ID,"/raw/data"))
#7. Run reporter script
render(here("RAAB7_scripts","RAAB7_reporter_new-script-names.Rmd"), output_file = here("outputs", paste0(ID,"_","report")), output_dir = here("outputs", ID, "summary"))
#7. Run reporter script
render(here("RAAB7_scripts","RAAB7_reporter_new-script-names.Rmd"), output_file = here("outputs", paste0(ID,"_","report")), output_dir = here("outputs", ID, "summary"))
install.packages("fancyhdr")
#7. Run reporter script
render(here("RAAB7_scripts","RAAB7_reporter_new-script-names.Rmd"), output_file = here("outputs", paste0(ID,"_","report")), output_dir = here("outputs", ID, "summary"))
tinytex::reinstall_tinytex(repository = "illinois")
#7. Run reporter script
render(here("RAAB7_scripts","RAAB7_reporter_new-script-names.Rmd"), output_file = here("outputs", paste0(ID,"_","report")), output_dir = here("outputs", ID, "summary"))
#7. Run reporter script
render(here("RAAB7_scripts","RAAB7_reporter_new-script-names.Rmd"), output_file = here("outputs", paste0(ID,"_","report")), output_dir = here("outputs", ID, "summary"))
#7. Run reporter script
render(here("RAAB7_scripts","RAAB7_reporter_new-script-names.Rmd"), output_file = here("outputs", paste0(ID,"_","report")), output_dir = here("outputs", ID, "summary"))
#6. Run reporter script
render(here("RAAB7_scripts","RAAB7_reporter_new-script-names.Rmd"), output_file = here("outputs", paste0(ID,"_","report")), output_dir = here("outputs", ID, "summary"))
#6. Run reporter script
render(here("RAAB7_scripts","RAAB7_reporter_new-script-names.Rmd"), output_file = here("outputs", paste0(ID,"_","report")), output_dir = here("outputs", ID, "summary"))
#6. Run reporter script
render(here("RAAB7_scripts","RAAB7_reporter_new-script-names.Rmd"), output_file = here("outputs", paste0(ID,"_","report")), output_dir = here("outputs", ID, "summary"))
#6. Run reporter script
render(here("RAAB7_scripts","RAAB7_reporter_new-script-names.Rmd"), output_file = here("outputs", paste0(ID,"_","report")), output_dir = here("outputs", ID, "summary"))
#6. Run reporter script
render(here("RAAB7_scripts","RAAB7_reporter_new-script-names.Rmd"), output_file = here("outputs", paste0(ID,"_","report")), output_dir = here("outputs", ID, "summary"))
#6. Run reporter script
render(here("RAAB7_scripts","RAAB7_reporter_new-script-names.Rmd"), output_file = here("outputs", paste0(ID,"_","report")), output_dir = here("outputs", ID, "summary"))
